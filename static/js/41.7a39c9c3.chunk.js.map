{"version":3,"file":"static/js/41.7a39c9c3.chunk.js","mappings":"2NACA,EAAuB,0BAAvB,EAAuD,yBAAvD,EAAwF,2B,6BCgFxF,EA3EoB,WAClB,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAcC,EAAAA,EAAAA,MACdC,GAAgBD,EAAAA,EAAAA,MAEhBE,EAAe,SAACC,GACpB,MAAwBA,EAAEC,cAAlBX,EAAR,EAAQA,KAAMY,EAAd,EAAcA,MAEd,OAAQZ,GACN,IAAK,OACHC,EAAQW,GACR,MAEF,IAAK,SACHT,EAAUS,GACV,MAEF,QACE,OAEL,EAaKC,EAAQ,WACZZ,EAAQ,IACRE,EAAU,GACX,EAED,OACE,kBAAMW,SAjBa,SAACJ,GACpBA,EAAEK,iBAEF,IAAMC,EAAa,CACjBhB,KAAMA,EACNE,OAAQA,GAEVE,GAASa,EAAAA,EAAAA,IAAeD,IACxBH,GACD,EAQC,WACE,mBAAOK,UAAWC,EAAQC,QAASd,EAAnC,kBAEE,kBACEY,UAAWC,EACXE,KAAK,OACLrB,KAAK,OACLsB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRZ,MAAOZ,EACPyB,SAAUhB,QAGd,mBAAOS,UAAWC,EAAQC,QAASZ,EAAnC,oBAEE,kBACEU,UAAWC,EACXE,KAAK,MACLrB,KAAK,SACLsB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRZ,MAAOV,EACPuB,SAAUhB,QAId,mBAAQS,UAAWC,EAAnB,2BAGL,EC9ED,EAAuB,qBAAvB,EAAoD,sB,oBCyBpD,EApBe,WACb,IAAMf,GAAWC,EAAAA,EAAAA,MACXqB,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAK3B,OACE,mBAAOV,UAAWC,EAAlB,mCAEE,kBACED,UAAWC,EACXE,KAAK,OACLT,MAAOc,EACPD,SAXe,SAACf,GACpBN,GAASyB,EAAAA,EAAAA,GAAWnB,EAAEoB,OAAOlB,OAC9B,MAaF,E,8BCMD,EAvBoB,WAClB,IAAMR,GAAWC,EAAAA,EAAAA,MACX0B,GAAWJ,EAAAA,EAAAA,IAAYK,EAAAA,IACvBN,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAE3B,OACE,SAAC,KAAD,UACGG,EACEL,QAAO,SAAAO,GAAO,OAAIA,EAAQjC,KAAKkC,cAAcC,SAAST,EAAOQ,cAA/C,IACdE,KAAI,gBAAGC,EAAH,EAAGA,GAAIrC,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACH,UAAC,UAAD,YACE,SAAC,KAAD,CAAQF,KAAMA,EAAMsC,KAAK,QACzB,SAAC,eAAD,CACEf,OAAO,cAAGgB,KAAK,qBAAR,mBAAiCvC,KACxCwC,YAAW,UAAKtC,MAElB,mBAAQuC,QAAS,kBAAMrC,GAASsC,EAAAA,EAAAA,IAAeL,GAA9B,EAAjB,sBANcA,EADb,KAYZ,ECMD,EAzBiB,WACf,OAA0BV,EAAAA,EAAAA,IAAYgB,EAAAA,IAA9BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,MACVC,GAAiBnB,EAAAA,EAAAA,IAAYoB,EAAAA,IAC7B3C,GAAWC,EAAAA,EAAAA,MAQjB,OANA2C,EAAAA,EAAAA,YAAU,WACJF,GACF1C,GAAS6C,EAAAA,EAAAA,MAEZ,GAAE,CAAC7C,EAAU0C,KAGZ,4BACE,uCACA,SAAC,EAAD,KACA,sCACA,SAAC,EAAD,IACY,YAAXF,IAAwB,SAACM,EAAA,EAAD,IACxBL,IAAS,wBAAKA,KACf,SAAC,EAAD,MAIL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/contactForm/ContactForm.module.css?fd94","components/contactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/filter/Filter.module.css?e85f","components/filter/Filter.jsx","components/contactList/ContactList.jsx","page/contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"ContactForm_wrap__wHTA5\",\"btn\":\"ContactForm_btn__yDDxL\",\"input\":\"ContactForm_input__e2U+9\"};","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.css';\nimport { addNewContacts } from '../../redux/contacts/contactsOperations';\nimport { useDispatch } from 'react-redux';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const newContact = {\n      name: name,\n      number: number,\n    };\n    dispatch(addNewContacts(newContact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className={s.wrap} htmlFor={nameInputId}>\n        Name\n        <input\n          className={s.input}\n          type='text'\n          name='name'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={s.wrap} htmlFor={numberInputId}>\n        Number\n        <input\n          className={s.input}\n          type='tel'\n          name='number'\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n          title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button className={s.btn}>Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"Filter_wrap__lGYWr\",\"input\":\"Filter_input__R4e-B\"};","import React from 'react';\nimport s from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterItem } from '../../redux/contacts/contactsSlice';\nimport { filterContactsSelector } from '../../redux/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(filterContactsSelector);\n  const changeFilter = (e) => {\n    dispatch(filterItem(e.target.value));\n  };\n\n  return (\n    <label className={s.wrap}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type='text'\n        value={filter}\n        onChange={changeFilter}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/contactsOperations';\nimport { filterContactsSelector, getItemsSelector } from '../../redux/selectors';\nimport { List } from 'antd';\nimport Avatar from 'react-avatar';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getItemsSelector);\n  const filter = useSelector(filterContactsSelector);\n\n  return (\n    <List>\n      {contacts\n        .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n        .map(({ id, name, number }) => (\n          <List.Item key={id}>\n            <Avatar name={name} size='40' />\n            <List.Item.Meta\n              title={<a href='https://ant.design'>{`${name}`}</a>}\n              description={`${number}`}\n            />\n            <button onClick={() => dispatch(deleteContacts(id))}>delete</button>\n          </List.Item>\n        ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import React, { useEffect } from 'react';\nimport ContactForm from '../../components/contactForm';\nimport Filter from '../../components/filter';\nimport Loader from '../../components/Loader';\nimport ContactList from '../../components/contactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactsSelector, getNameSelector } from '../../redux/selectors';\nimport { fetchContacts } from '../../redux/contacts/contactsOperations';\n\nconst Contacts = () => {\n  const { status, error } = useSelector(getContactsSelector);\n  const isTokenSettled = useSelector(getNameSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isTokenSettled) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, isTokenSettled]);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {status === 'loading' && <Loader />}\n      {error && <h2>{error}</h2>}\n      <ContactList />\n    </div>\n\n  );\n};\n\nexport default Contacts;\n"],"names":["useState","name","setName","number","setNumber","dispatch","useDispatch","nameInputId","nanoid","numberInputId","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","newContact","addNewContacts","className","s","htmlFor","type","pattern","title","required","onChange","filter","useSelector","filterContactsSelector","filterItem","target","contacts","getItemsSelector","contact","toLowerCase","includes","map","id","size","href","description","onClick","deleteContacts","getContactsSelector","status","error","isTokenSettled","getNameSelector","useEffect","fetchContacts","Loader"],"sourceRoot":""}